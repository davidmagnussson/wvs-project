{"version":3,"sources":["datafiles sync /^/.//.*/.json$","Selectors.jsx","Hover.jsx","ParallellCoord.jsx","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Selectors","props","handleClickCondition","console","log","target","handleClickWave","state","className","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","this","activeCondition","activeWave","React","Component","Hover","handleData","country","arr","data","push","ParallellCoord","feelingOfHappiness","question","wave","questions","dataArr","answers","forEach","element","parseInt","setState","color","width","height","dimensions","Country","title","Very_happy","Quite_happy","Not_very_happy","Not_at_all_happy","Dont_know","No_answer","highlights","onBrush","OnBrushCall","onBrushEnd","OnBrushEndCall","onLineHover","OnHoverCall","onLinesHover","OnlinesHoverCall","confidenceInGovernment","A_great_deal","Quite_a_lot","Not_very_much","None_at_all","thinkingAboutMeaningAndPurposeOfLife","Often","Sometimes","Rarely","Never","howProudOfNationality","Very_proud","Quite_proud","Not_very_proud","Not_at_all_proud","importantInLifeFamily","Very_important","Rather_important","Not_very_important","Not_at_all_important","importantInLifeWork","satisfactionWithLife","two","three","four","five","six","seven","eight","nine","Mean","Standard_deviation","satisfactionOfFinacialSituationOfHousehold","updateChart","condition","setActiveWave","ActiveWave","require","ActiveQuestion","setActiveCondition","setActiveDataPoints","ActiveDataPoints","getActiveDataPoints","setCurrentLine","currentLine","getCurrentLine","incomingData","NewActiveData","incData","hovered","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1e0d0f09.chunk.js","sourcesContent":["var map = {\n\t\"./1999-1995.json\": 146,\n\t\"./2004-2000.json\": 147,\n\t\"./2009-2005.json\": 53,\n\t\"./2014-2010.json\": 148\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 145;","import React from \"react\";\n\nclass Selectors extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n    handleClickCondition = (e) => {\n        console.log(e.target.id);\n    }\n\n    handleClickWave = (e) => {\n        console.log(e.target.id);\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"offset-5 row\">\n                    <div id=\"btn-group col\">\n                        <div className=\"dropdown\">\n                            <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Condition</button>\n                            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                                <span className=\"dropdown-item\" onClick={this.props.activeCondition} id=\"Feeling of Happiness\">Feeling of Happiness</span>\n                                <span className=\"dropdown-item\" onClick={this.props.activeCondition} id=\"Confidence in goverment\" >Confidence in goverment</span>\n                                <span className=\"dropdown-item\" onClick={this.props.activeCondition} id=\"How proud of nationality\" >How proud of nationality</span>\n                                <span className=\"dropdown-item\" onClick={this.props.activeCondition} id=\"Important in life: Work\" >Important in life: Work</span>\n                                <span className=\"dropdown-item\" onClick={this.props.activeCondition} id=\"Important in life: Family\" >Important in life: Family</span>\n                                <span className=\"dropdown-item\" onClick={this.props.activeCondition} id=\"Satisfaction with financial situation of household\" >Satisfaction with financial situation of household</span>\n                                <span className=\"dropdown-item\" onClick={this.props.activeCondition} id=\"Satisfaction with life\" >Satisfaction with life</span>\n                                <span className=\"dropdown-item\" onClick={this.props.activeCondition} id=\"Thinking about meaning and purpose of life\" >Thinking about meaning and purpose of life</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"btn-group col\">\n                        <div className=\"dropdown\">\n                            <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Wave</button>\n                            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                                <span className=\"dropdown-item\" onClick={this.props.activeWave} id=\"2014-2010\">2014-2010</span>\n                                <span className=\"dropdown-item\" onClick={this.props.activeWave} id=\"2009-2005\">2009-2005</span>\n                                <span className=\"dropdown-item\" onClick={this.props.activeWave} id=\"2004-2000\">2004-2000</span>\n                                <span className=\"dropdown-item\" onClick={this.props.activeWave} id=\"1999-1995\">1999-1995</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Selectors;","import React, { Component } from 'react';\n\nclass Hover extends Component {\n    constructor(props) {\n        super(props)\n    };\n\n    handleData = () => {\n        let country = this.props.country()\n        let arr = []\n\n        country.map((data) => {\n            arr.push(data)\n        });\n        return arr\n    }\n\n    render() {\n        return (\n            <div>\n                <h2 id=\"hoveredCountry\">{this.handleData()}</h2>\n            </div>\n        );\n    }\n}\n\nexport default Hover;","import React from \"react\";\nimport \"./style.css\";\nimport { ParallelCoordinates } from \"react-parcoords\";\n// import { dataArr } from './data.js';\nimport Selectors from './Selectors';\nimport Hover from './Hover';\n\nclass ParallellCoord extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            ActiveDataPoints: [],\n            currentLine: [],\n            data: [],\n            props: {},\n            ActiveQuestion: \"Feeling of happiness\",\n            ActiveWave: \"2009-2005\",\n            wave: require('./datafiles/2009-2005.json'),\n            // wave1: require('./datafiles/2014-2010.json'),\n            // wave2: require('./datafiles/2009-2005.json'),\n            // wave3: require('./datafiles/2004-2000.json'),\n            // wave4: require('./datafiles/1999-1995.json'),\n        };\n    }\n\n    componentDidMount() {\n        this.feelingOfHappiness();\n        // this.confidenceInGovernment();\n        // this.howProudOfNationality();\n        // this.thinkingAboutMeaningAndPurposeOfLife();\n        // this.importantInLifeFamily();\n        // this.importantInLifeWork();\n        // this.satisfactionWithLife();\n        // this.satisfactionOfFinacialSituationOfHousehold();\n\n    };\n\n    feelingOfHappiness = () => {\n        const question = this.state.wave[0].questions[0].question\n        console.log(question);\n        console.log(this.state.wave);\n\n        let dataArr = [];\n        dataArr.push({\n            'Country': \"-\",\n            'Very_happy': 0,\n            'Quite_happy': 0,\n            'Not_very_happy': 0,\n            'Not_at_all_happy': 0,\n            'Dont_know': 0,\n            'No_answer': 0,\n        })\n        let setData = this.state.wave[0].questions[0].answers;\n        setData.forEach(element => {\n            dataArr.push({\n                'Country': element[\"Country/region\"],\n                'Very_happy': parseInt(element[\"Very happy\"]),\n                'Quite_happy': parseInt(element[\"Quite happy\"]),\n                'Not_very_happy': parseInt(element[\"Not very happy\"]),\n                'Not_at_all_happy': parseInt(element[\"Not at all happy\"]),\n                'Dont_know': parseInt(element[\"Don´t know\"]),\n                'No_answer': parseInt(element[\"No answer\"]),\n            }\n            );\n        })\n        dataArr.push({\n            'Country': \"--\",\n            'Very_happy': 100,\n            'Quite_happy': 100,\n            'Not_very_happy': 100,\n            'Not_at_all_happy': 100,\n            'Dont_know': 100,\n            'No_answer': 100,\n        })\n\n        const dimensions = {\n            Country: {\n                title: \"Country\",\n                type: \"string\"\n            },\n            Very_happy: {\n                title: \"Very happy\",\n                type: \"number\"\n            },\n            Quite_happy: {\n                title: \"Quite happy\",\n                type: \"number\"\n            },\n            Not_very_happy: {\n                title: \"Not very happy\",\n                type: \"number\"\n            },\n            Not_at_all_happy: {\n                title: \"Not at all happy\",\n                type: \"number\"\n            },\n            Dont_know: {\n                title: \"Don´t know\",\n                type: \"number\"\n            },\n            No_answer: {\n                title: \"No answer\",\n                type: \"number\"\n            },\n        };\n\n        this.setState({\n            props: {\n                color: '#777',\n                width: 1100,\n                height: 500,\n                dimensions,\n                question: this.state.wave[0].questions[0].question,\n                wave: this.state.activeWave,\n                data: dataArr,\n                highlights: [],\n                onBrush: this.OnBrushCall,\n                onBrushEnd: this.OnBrushEndCall,\n                onLineHover: this.OnHoverCall,\n                onLinesHover: this.OnlinesHoverCall\n            }\n        });\n    }\n\n    confidenceInGovernment = () => {\n        const question = this.state.wave[0].questions[1].question;\n        console.log(question);\n\n        let dataArr = [];\n        dataArr.push({\n            'Country': \"-\",\n            'Very_happy': 0,\n            'Quite_happy': 0,\n            'Not_very_happy': 0,\n            'Not_at_all_happy': 0,\n            'Dont_know': 0,\n            'No_answer': 0,\n        })\n        let setData = this.state.wave[0].questions[1].answers;\n        setData.forEach(element => {\n            dataArr.push({\n                'Country': element[\"Country/region\"],\n                'A_great_deal': parseInt(element[\"A great deal\"]),\n                'Quite_a_lot': parseInt(element[\"Quite a lot\"]),\n                'Not_very_much': parseInt(element[\"Not very much\"]),\n                'None_at_all': parseInt(element[\"None at all\"]),\n                'Dont_know': parseInt(element[\"Don´t know\"]),\n                'No_answer': parseInt(element[\"No answer\"]),\n            }\n            );\n        })\n        dataArr.push({\n            'Country': \"--\",\n            'A_great_deal': 100,\n            'Quite_a_lot': 100,\n            'Not_very_much': 100,\n            'None_at_all': 100,\n            'Dont_know': 100,\n            'No_answer': 100,\n        })\n\n        const dimensions = {\n            Country: {\n                title: \"Country\",\n                type: \"string\"\n            },\n            A_great_deal: {\n                title: \"A gret deal\",\n                type: \"number\"\n            },\n            Quite_a_lot: {\n                title: \"Quite a lot\",\n                type: \"number\"\n            },\n            Not_very_much: {\n                title: \"Not very much\",\n                type: \"number\"\n            },\n            None_at_all: {\n                title: \"Not at all\",\n                type: \"number\"\n            },\n            Dont_know: {\n                title: \"Don´t know\",\n                type: \"number\"\n            },\n            No_answer: {\n                title: \"No answer\",\n                type: \"number\"\n            },\n        };\n\n        this.setState({\n            props: {\n                color: '#777',\n                width: 1100,\n                height: 500,\n                dimensions,\n                question: this.state.wave[0].questions[1].question,\n                wave: this.state.activeWave,\n                data: dataArr,\n                highlights: [],\n                onBrush: this.OnBrushCall,\n                onBrushEnd: this.OnBrushEndCall,\n                onLineHover: this.OnHoverCall,\n                onLinesHover: this.OnlinesHoverCall\n            }\n        });\n    }\n\n    thinkingAboutMeaningAndPurposeOfLife = () => {\n        const question = this.state.wave[0].questions[2].question;\n        console.log(question);\n\n        let dataArr = [];\n        dataArr.push({\n            'Country': \"-\",\n            'Often': 0,\n            'Sometimes': 0,\n            'Rarely': 0,\n            'Never': 0,\n            'Dont_know': 0,\n            'No_answer': 0,\n        })\n        let setData = this.state.wave[0].questions[2].answers;\n        setData.forEach(element => {\n            dataArr.push({\n                'Country': element[\"Country/region\"],\n                'Often': parseInt(element[\"Often\"]),\n                'Sometimes': parseInt(element[\"Sometimes\"]),\n                'Rarely': parseInt(element[\"Rarely\"]),\n                'Never': parseInt(element[\"Never\"]),\n                'Dont_know': parseInt(element[\"Don´t know\"]),\n                'No_answer': parseInt(element[\"No answer\"]),\n            }\n            );\n        })\n        dataArr.push({\n            'Country': \"--\",\n            'Often': 100,\n            'Sometimes': 100,\n            'Rarely': 100,\n            'Never': 100,\n            'Dont_know': 100,\n            'No_answer': 100,\n        })\n\n        const dimensions = {\n            Country: {\n                title: \"Country\",\n                type: \"string\"\n            },\n            Often: {\n                title: \"Often\",\n                type: \"number\"\n            },\n            Sometimes: {\n                title: \"Sometimes\",\n                type: \"number\"\n            },\n            Rarely: {\n                title: \"Rarely\",\n                type: \"number\"\n            },\n            Never: {\n                title: \"Never\",\n                type: \"number\"\n            },\n            Dont_know: {\n                title: \"Don´t know\",\n                type: \"number\"\n            },\n            No_answer: {\n                title: \"No answer\",\n                type: \"number\"\n            },\n        };\n\n        this.setState({\n            props: {\n                color: '#777',\n                width: 1100,\n                height: 500,\n                dimensions,\n                question: this.state.wave[0].questions[2].question,\n                wave: this.state.activeWave,\n                data: dataArr,\n                highlights: [],\n                onBrush: this.OnBrushCall,\n                onBrushEnd: this.OnBrushEndCall,\n                onLineHover: this.OnHoverCall,\n                onLinesHover: this.OnlinesHoverCall\n            }\n        });\n    }\n\n    howProudOfNationality = () => {\n        const question = this.state.wave[0].questions[3].question;\n        console.log(question);\n\n        let dataArr = [];\n        dataArr.push({\n            'Country': \"-\",\n            'Very_proud': 0,\n            'Quite_proud': 0,\n            'Not_very_proud': 0,\n            'Not_at_all_proud': 0,\n            'Dont_know': 0,\n            'No_answer': 0,\n        })\n        let setData = this.state.wave[0].questions[3].answers;\n        setData.forEach(element => {\n            dataArr.push({\n                'Country': element[\"Country/region\"],\n                'Very_proud': parseInt(element[\"Very proud\"]),\n                'Quite_proud': parseInt(element[\"Quite proud\"]),\n                'Not_very_proud': parseInt(element[\"Not very proud\"]),\n                'Not_at_all_proud': parseInt(element[\"Not at all proud\"]),\n                'Dont_know': parseInt(element[\"Don´t know\"]),\n                'No_answer': parseInt(element[\"No answer\"]),\n            }\n            );\n        })\n        dataArr.push({\n            'Country': \"--\",\n            'Very_proud': 100,\n            'Quite_proud': 100,\n            'Not_very_proud': 100,\n            'Not_at_all_proud': 100,\n            'Dont_know': 100,\n            'No_answer': 100,\n        })\n\n        const dimensions = {\n            Country: {\n                title: \"Country\",\n                type: \"string\"\n            },\n            Very_proud: {\n                title: \"Very proud\",\n                type: \"number\"\n            },\n            Quite_proud: {\n                title: \"Quite proud\",\n                type: \"number\"\n            },\n            Not_very_proud: {\n                title: \"Not very proud\",\n                type: \"number\"\n            },\n            Not_at_all_proud: {\n                title: \"Not at all proud\",\n                type: \"number\"\n            },\n            Dont_know: {\n                title: \"Don´t know\",\n                type: \"number\"\n            },\n            No_answer: {\n                title: \"No answer\",\n                type: \"number\"\n            },\n        };\n\n        this.setState({\n            props: {\n                color: '#777',\n                width: 1100,\n                height: 500,\n                dimensions,\n                question: this.state.wave[0].questions[3].question,\n                wave: this.state.activeWave,\n                data: dataArr,\n                highlights: [],\n                onBrush: this.OnBrushCall,\n                onBrushEnd: this.OnBrushEndCall,\n                onLineHover: this.OnHoverCall,\n                onLinesHover: this.OnlinesHoverCall\n            }\n        });\n    }\n\n    importantInLifeFamily = () => {\n        const question = this.state.wave[0].questions[4].question;\n        console.log(question);\n\n        let dataArr = [];\n        dataArr.push({\n            'Country': \"-\",\n            'Very_important': 0,\n            'Rather_important': 0,\n            'Not_very_important': 0,\n            'Not_at_all_important': 0,\n            'Dont_know': 0,\n            'No_answer': 0,\n        })\n        let setData = this.state.wave[0].questions[4].answers;\n        setData.forEach(element => {\n            dataArr.push({\n                'Country': element[\"Country/region\"],\n                'Very_important': parseInt(element[\"Very important\"]),\n                'Rather_important': parseInt(element[\"Rather important\"]),\n                'Not_very_important': parseInt(element[\"Not very important\"]),\n                'Not_at_all_important': parseInt(element[\"Not at all important\"]),\n                'Dont_know': parseInt(element[\"Don´t know\"]),\n                'No_answer': parseInt(element[\"No answer\"]),\n            }\n            );\n        })\n        dataArr.push({\n            'Country': \"--\",\n            'Very_important': 100,\n            'Rather_important': 100,\n            'Not_very_important': 100,\n            'Not_at_all_important': 100,\n            'Dont_know': 100,\n            'No_answer': 100,\n        })\n\n        const dimensions = {\n            Country: {\n                title: \"Country\",\n                type: \"string\"\n            },\n            Very_important: {\n                title: \"Very important\",\n                type: \"number\"\n            },\n            Rather_important: {\n                title: \"Rather important\",\n                type: \"number\"\n            },\n            Not_very_important: {\n                title: \"Not very important\",\n                type: \"number\"\n            },\n            Not_at_all_important: {\n                title: \"Not at all important\",\n                type: \"number\"\n            },\n            Dont_know: {\n                title: \"Don´t know\",\n                type: \"number\"\n            },\n            No_answer: {\n                title: \"No answer\",\n                type: \"number\"\n            },\n        };\n\n        this.setState({\n            props: {\n                color: '#777',\n                width: 1100,\n                height: 500,\n                dimensions,\n                question: this.state.wave[0].questions[4].question,\n                wave: this.state.activeWave,\n                data: dataArr,\n                highlights: [],\n                onBrush: this.OnBrushCall,\n                onBrushEnd: this.OnBrushEndCall,\n                onLineHover: this.OnHoverCall,\n                onLinesHover: this.OnlinesHoverCall\n            }\n        });\n    }\n\n    importantInLifeWork = () => {\n        const question = this.state.wave[0].questions[5].question;\n        console.log(question);\n\n        let dataArr = [];\n        dataArr.push({\n            'Country': \"-\",\n            'Very_important': 0,\n            'Rather_important': 0,\n            'Not_very_important': 0,\n            'Not_at_all_important': 0,\n            'Dont_know': 0,\n            'No_answer': 0,\n        })\n        let setData = this.state.wave[0].questions[5].answers;\n        setData.forEach(element => {\n            dataArr.push({\n                'Country': element[\"Country/region\"],\n                'Very_important': parseInt(element[\"Very important\"]),\n                'Rather_important': parseInt(element[\"Rather important\"]),\n                'Not_very_important': parseInt(element[\"Not very important\"]),\n                'Not_at_all_important': parseInt(element[\"Not at all important\"]),\n                'Dont_know': parseInt(element[\"Don´t know\"]),\n                'No_answer': parseInt(element[\"No answer\"]),\n            }\n            );\n        })\n        dataArr.push({\n            'Country': \"--\",\n            'Very_important': 100,\n            'Rather_important': 100,\n            'Not_very_important': 100,\n            'Not_at_all_important': 100,\n            'Dont_know': 100,\n            'No_answer': 100,\n        })\n\n        const dimensions = {\n            Country: {\n                title: \"Country\",\n                type: \"string\"\n            },\n            Very_important: {\n                title: \"Very important\",\n                type: \"number\"\n            },\n            Rather_important: {\n                title: \"Rather important\",\n                type: \"number\"\n            },\n            Not_very_important: {\n                title: \"Not very important\",\n                type: \"number\"\n            },\n            Not_at_all_important: {\n                title: \"Not at all important\",\n                type: \"number\"\n            },\n            Dont_know: {\n                title: \"Don´t know\",\n                type: \"number\"\n            },\n            No_answer: {\n                title: \"No answer\",\n                type: \"number\"\n            },\n        };\n\n        this.setState({\n            props: {\n                color: '#777',\n                width: 1100,\n                height: 500,\n                dimensions,\n                question: this.state.wave[0].questions[5].question,\n                wave: this.state.activeWave,\n                data: dataArr,\n                highlights: [],\n                onBrush: this.OnBrushCall,\n                onBrushEnd: this.OnBrushEndCall,\n                onLineHover: this.OnHoverCall,\n                onLinesHover: this.OnlinesHoverCall\n            }\n        });\n    }\n\n    satisfactionWithLife = () => {\n        const question = this.state.wave[0].questions[6].question;\n        console.log(question);\n\n        let dataArr = [];\n        dataArr.push({\n            'Country': \"-\",\n            'two': 0,\n            'three': 0,\n            'four': 0,\n            'five': 0,\n            'six': 0,\n            'seven': 0,\n            'eight': 0,\n            'nine': 0,\n            'Dissatisfied': 0,\n            'Satisfied': 0,\n            'Mean': 0,\n            'Standard_deviation': 0,\n            'Dont_know': 0,\n            'No_answer': 0,\n        })\n        let setData = this.state.wave[0].questions[6].answers;\n        setData.forEach(element => {\n            dataArr.push({\n                'Country': element[\"Country/region\"],\n                'two': parseInt(element[\"2\"]),\n                'three': parseInt(element[\"3\"]),\n                'four': parseInt(element[\"4\"]),\n                'five': parseInt(element[\"5\"]),\n                'six': parseInt(element[\"6\"]),\n                'seven': parseInt(element[\"7\"]),\n                'eight': parseInt(element[\"8\"]),\n                'nine': parseInt(element[\"9\"]),\n                'Dissatisfied': parseInt(element[\"Dissatisfied\"]),\n                'Satisfied': parseInt(element[\"Satisfied\"]),\n                'Mean': parseInt(element[\"Mean\"]),\n                'Standard_deviation': parseInt(element[\"Standard Deviation\"]),\n                'Dont_know': parseInt(element[\"Don´t know\"]),\n                'No_answer': parseInt(element[\"No answer\"]),\n            }\n            );\n        })\n        dataArr.push({\n            'Country': \"--\",\n            'two': 100,\n            'three': 100,\n            'four': 100,\n            'five': 100,\n            'six': 100,\n            'seven': 100,\n            'eight': 100,\n            'nine': 100,\n            'Dissatisfied': 100,\n            'Satisfied': 100,\n            'Mean': 100,\n            'Standard_deviation': 100,\n            'Dont_know': 100,\n            'No_answer': 100,\n        })\n\n        const dimensions = {\n            Country: {\n                title: \"Country\",\n                type: \"string\"\n            },\n            two: {\n                title: \"2\",\n                type: \"number\"\n            },\n            three: {\n                title: \"3\",\n                type: \"number\"\n            },\n            four: {\n                title: \"4\",\n                type: \"number\"\n            },\n            five: {\n                title: \"5\",\n                type: \"number\"\n            },\n            six: {\n                title: \"6\",\n                type: \"number\"\n            },\n            seven: {\n                title: \"7\",\n                type: \"number\"\n            },\n            eight: {\n                title: \"8\",\n                type: \"number\"\n            },\n            nine: {\n                title: \"9\",\n                type: \"number\"\n            },\n            Mean: {\n                title: \"Mean\",\n                type: \"number\"\n            },\n            Standard_deviation: {\n                title: \"Stnrd Devi\",\n                type: \"number\"\n            },\n            Dont_know: {\n                title: \"Don't know\",\n                type: \"number\"\n            },\n            No_answer: {\n                title: \"No answer\",\n                type: \"number\"\n            },\n        };\n\n        this.setState({\n            props: {\n                color: '#777',\n                width: 1100,\n                height: 500,\n                dimensions,\n                question: this.state.wave[0].questions[6].question,\n                wave: this.state.activeWave,\n                data: dataArr,\n                highlights: [],\n                onBrush: this.OnBrushCall,\n                onBrushEnd: this.OnBrushEndCall,\n                onLineHover: this.OnHoverCall,\n                onLinesHover: this.OnlinesHoverCall\n            }\n        });\n    }\n\n    satisfactionOfFinacialSituationOfHousehold = () => {\n        const question = this.state.wave[0].questions[7].question;\n        console.log(question);\n\n\n        let dataArr = [];\n        dataArr.push({\n            'Country': \"-\",\n            'two': 0,\n            'three': 0,\n            'four': 0,\n            'five': 0,\n            'six': 0,\n            'seven': 0,\n            'eight': 0,\n            'nine': 0,\n            'Dissatisfied': 0,\n            'Satisfied': 0,\n            'Mean': 0,\n            'Standard_deviation': 0,\n            'Dont_know': 0,\n            'No_answer': 0,\n        })\n        let setData = this.state.wave[0].questions[7].answers;\n        setData.forEach(element => {\n            dataArr.push({\n                'Country': element[\"Country/region\"],\n                'two': parseInt(element[\"2\"]),\n                'three': parseInt(element[\"3\"]),\n                'four': parseInt(element[\"4\"]),\n                'five': parseInt(element[\"5\"]),\n                'six': parseInt(element[\"6\"]),\n                'seven': parseInt(element[\"7\"]),\n                'eight': parseInt(element[\"8\"]),\n                'nine': parseInt(element[\"9\"]),\n                'Dissatisfied': parseInt(element[\"Dissatisfied\"]),\n                'Satisfied': parseInt(element[\"Satisfied\"]),\n                'Mean': parseInt(element[\"Mean\"]),\n                'Standard_deviation': parseInt(element[\"Standard Deviation\"]),\n                'Dont_know': parseInt(element[\"Don´t know\"]),\n                'No_answer': parseInt(element[\"No answer\"]),\n            }\n            );\n        })\n        dataArr.push({\n            'Country': \"--\",\n            'two': 100,\n            'three': 100,\n            'four': 100,\n            'five': 100,\n            'six': 100,\n            'seven': 100,\n            'eight': 100,\n            'nine': 100,\n            'Dissatisfied': 100,\n            'Satisfied': 100,\n            'Mean': 100,\n            'Standard_deviation': 100,\n            'Dont_know': 100,\n            'No_answer': 100,\n        })\n\n        const dimensions = {\n            Country: {\n                title: \"Country\",\n                type: \"string\"\n            },\n            two: {\n                title: \"2\",\n                type: \"number\"\n            },\n            three: {\n                title: \"3\",\n                type: \"number\"\n            },\n            four: {\n                title: \"4\",\n                type: \"number\"\n            },\n            five: {\n                title: \"5\",\n                type: \"number\"\n            },\n            six: {\n                title: \"6\",\n                type: \"number\"\n            },\n            seven: {\n                title: \"7\",\n                type: \"number\"\n            },\n            eight: {\n                title: \"8\",\n                type: \"number\"\n            },\n            nine: {\n                title: \"9\",\n                type: \"number\"\n            },\n            Mean: {\n                title: \"Mean\",\n                type: \"number\"\n            },\n            Standard_deviation: {\n                title: \"Stnrd Devi\",\n                type: \"number\"\n            },\n            Dont_know: {\n                title: \"Don't know\",\n                type: \"number\"\n            },\n            No_answer: {\n                title: \"No answer\",\n                type: \"number\"\n            },\n        };\n\n        this.setState({\n            props: {\n                color: '#777',\n                width: 1100,\n                height: 500,\n                dimensions,\n                question: this.state.wave[0].questions[7].question,\n                wave: this.state.activeWave,\n                data: dataArr,\n                highlights: [],\n                onBrush: this.OnBrushCall,\n                onBrushEnd: this.OnBrushEndCall,\n                onLineHover: this.OnHoverCall,\n                onLinesHover: this.OnlinesHoverCall\n            }\n        });\n    }\n\n    // --------------------\n\n    updateChart = (condition, wave) => {\n    }\n\n\n    setActiveWave = (e) => {\n        this.setState({\n            ActiveWave: e.target.id,\n            wave: require(\"./datafiles/\" + e.target.id + \".json\")\n        }, () => {\n            // console.log(\"Current wave: \", this.state.ActiveWave);\n            // console.log(\"Data of wave: \", this.state.wave);\n\n            if (this.state.ActiveQuestion === \"Feeling of Happiness\") {\n                this.feelingOfHappiness();\n            } else if (this.state.ActiveQuestion === \"Confidence in goverment\") {\n                this.confidenceInGovernment();\n            } else if (this.state.ActiveQuestion === \"How proud of nationality\") {\n                this.howProudOfNationality();\n            } else if (this.state.ActiveQuestion === \"Important in life: Work\") {\n                this.importantInLifeWork();\n            } else if (this.state.ActiveQuestion === \"Important in life: Family\") {\n                this.importantInLifeFamily();\n            } else if (this.state.ActiveQuestion === \"Satisfaction with financial situation of household\") {\n                this.satisfactionOfFinacialSituationOfHousehold();\n            } else if (this.state.ActiveQuestion === \"Satisfaction with life\") {\n                this.satisfactionWithLife();\n            } else if (this.state.ActiveQuestion === \"Thinking about meaning and purpose of life\") {\n                this.thinkingAboutMeaningAndPurposeOfLife();\n            }\n\n        });\n    }\n\n    setActiveCondition = (e) => {\n        this.setState({\n            ActiveQuestion: e.target.id\n        }, () => {\n            // console.log(\"New question\", this.state.ActiveQuestion);\n            // console.log(\"Current Wave: \", this.state.wave);\n\n            if (this.state.ActiveQuestion === \"Feeling of Happiness\") {\n                this.feelingOfHappiness();\n            } else if (this.state.ActiveQuestion === \"Confidence in goverment\") {\n                this.confidenceInGovernment();\n            } else if (this.state.ActiveQuestion === \"How proud of nationality\") {\n                this.howProudOfNationality();\n            } else if (this.state.ActiveQuestion === \"Important in life: Work\") {\n                this.importantInLifeWork();\n            } else if (this.state.ActiveQuestion === \"Important in life: Family\") {\n                this.importantInLifeFamily();\n            } else if (this.state.ActiveQuestion === \"Satisfaction with financial situation of household\") {\n                this.satisfactionOfFinacialSituationOfHousehold();\n            } else if (this.state.ActiveQuestion === \"Satisfaction with life\") {\n                this.satisfactionWithLife();\n            } else if (this.state.ActiveQuestion === \"Thinking about meaning and purpose of life\") {\n                this.thinkingAboutMeaningAndPurposeOfLife();\n            }\n        })\n    }\n\n    setActiveDataPoints = arr => {\n        this.setState({ ActiveDataPoints: arr });\n    };\n\n    getActiveDataPoints = () => {\n        return this.state.ActiveDataPoints;\n    };\n\n    setCurrentLine = arr => {\n        this.setState({ currentLine: arr });\n    };\n\n    getCurrentLine = () => {\n        return this.state.currentLine;\n    };\n\n    OnBrushEndCall = incomingData => {\n        let NewActiveData = [];\n        incomingData.data.forEach(element => {\n            NewActiveData.push(element);\n        });\n        this.setActiveDataPoints(NewActiveData);\n    };\n\n    OnHoverCall = (incData) => {\n        let hovered = [];\n        if (typeof incData !== \"undefined\" && incData.Country !== \"--\" && incData.Country !== \"-\") {\n            hovered.push(incData.Country);\n        }\n\n        this.setCurrentLine(hovered);\n    }\n    render() {\n        return (\n            <div id=\"container\">\n                <h2>{this.state.ActiveQuestion} - {this.state.ActiveWave}</h2>\n                <div id=\"d3component\">\n                    <ParallelCoordinates {...this.state.props} />\n                </div>\n                <div>\n                    <Selectors activeCondition={this.setActiveCondition} activeWave={this.setActiveWave} />\n                    <Hover country={this.getCurrentLine} />\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default ParallellCoord;\n","import React from 'react';\nimport './App.css';\nimport ParallellCoord from './ParallellCoord';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div id=\"header\">\n          <h1 id=\"headerText\">\n            World Value Service - Visualization tool\n          </h1>\n        </div>\n\n        <div id=\"CoordinateSystem\">\n          <ParallellCoord />\n        </div>\n\n        <div id=\"DiscoveryProcess\">\n          <div id=\"DiscoveryProcess1\" className=\"Discoveryprocess\">\n            <h2>Discovery Process 1 - Find how the distribution is around the world on the question “Feeling of happiness”</h2>\n            <p>\n              When entering the tool it is pretty easy to select a wave, add countries to display and then visualize the distribution of “Feeling of happiness”, it is very intuitive. I can display the data in a table of data or in a staple chart.\n            </p>\n\n            <p>\n              There is an icon for PDF and excel which indicates that I can download the data, there is also a chart symbol which gives me the possibility to visualize the data in a table. However, it seems as if I can’t change the wave now that I have entered one, I am “stuck” on this wave. The only way I can find is to press the “Select wave” button in the header. When I click on the select wave I must go through the process of selecting countries and then picking question even if the only thing I wanted to do was to change the wave, nothing else.\n            </p>\n\n            <p>\n              The parallel coordinate system I have created and presented above gives me the possibility to easily change the wave and still present the same question, but now for a different time interval only by using a dropdown menu and change the timespan. It also gives me the possibility to easily alter the questions and stick with the same wave.\n            </p>\n\n          </div>\n          <div id=\"DiscoveryProcess2\" className=\"Discoveryprocess\">\n            <h2>Discovery Process 2 - I want to see the correlation between “Important in life: Work” and “Important in life: Family”</h2>\n            <p>\n              Now that I can show one question I want to be able to compare two different questions. As mentioned earlier, displaying one question had some limitations on what you could show. Can you compare different questions? As mentioned in the previous discovery process I can easily access a question with specified wave and countries to visualize an overview with a table containing percentages per option. I can easily download it as PDF or Excel file, however, I am interested in comparing the question “Important in life: Work” and “Important in life: Family” but I can’t visualize them at the same time? If I want to see both I have to first look at one then either press the button “Survey questions” and go in to the other one or navigate through all of the questions by pressing the arrows by the PDF and Excel symbols. I could download both files separately but it would be nice to have the ability to visualize them side by side and see the correlation.\n            </p>\n            <p>\n              There might be another option to visualize them both at the exact same time, but this is not presented in a clear way.\n            </p>\n            <p>\n              The parallel coordinate system I have presented above gives me the possibility to show the two questions at the same time and follow the general correlation of many countries as well as follow the correlation between the questions of one country.\n            </p>\n          </div>\n          <div id=\"learnings\">\n            <h2>My learnings</h2>\n            <p>\n              It is easy to get lost in the data when there is so much you can show. But do you really want to show everything at once, and making everything available? What I noticed with the WVS-tool was that it want to display so much data that it is hard to do comparative actions and change small variables, since the database has so much data. It therefore loses a lot of interaction. My biggest learning is therefore to not get lost in the amount of data. Do not sacrifice the interaction just to display all data. It might be better to first have an overview and then give the opportunity to dive into specific data if requested by the user.\n            </p>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}